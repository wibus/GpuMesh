CMAKE_MINIMUM_REQUIRED(VERSION 2.8.12)

SET(GpuMesh_PROJECT GpuMesh)
MESSAGE(STATUS "Building ${GpuMesh_PROJECT}")
PROJECT(${GpuMesh_PROJECT} CXX)

IF(CMAKE_COMPILER_IS_GNUCXX)
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
ELSEIF(MSVC)
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /wd4251") # dll interface
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /wd4244") # int to float
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /wd4351") # array init new behavior
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /wd4267") # conversion from 'size_t' to 'uint'
	set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /MD")
	set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /MDd")
    ADD_DEFINITIONS(-DNOMINMAX)                       # for abusive min max defines
ENDIF()

SET(GpuMesh_SRC_DIR ${CMAKE_CURRENT_SOURCE_DIR})
MESSAGE(STATUS "${GpuMesh_PROJECT} src dir: ${GpuMesh_SRC_DIR}")
SET(GpuMesh_BIN_DIR ${CMAKE_CURRENT_BINARY_DIR})
MESSAGE(STATUS "${GpuMesh_PROJECT} bin dir: ${GpuMesh_BIN_DIR}")

ADD_DEFINITIONS(-std=gnu++11)
IF(DEFINED ENABLE_PIRATE)
	ADD_DEFINITIONS(-DENABLE_PIRATE)
ENDIF(DEFINED ENABLE_PIRATE)

INCLUDE(LibLists.cmake)
INCLUDE(FileLists.cmake)

MESSAGE(STATUS "${GpuMesh_PROJECT} libraires: ${GpuMesh_LIBRARIES}")
MESSAGE(STATUS "${GpuMesh_PROJECT} Qt modules: ${GpuMesh_QT_MODULES}")
MESSAGE(STATUS "${GpuMesh_PROJECT} include dirs: ${GpuMesh_INCLUDE_DIRS}")

CUDA_INCLUDE_DIRECTORIES(${GpuMesh_INCLUDE_DIRS})
CUDA_ADD_EXECUTABLE(${GpuMesh_PROJECT} ${GpuMesh_SRC_FILES})
TARGET_LINK_LIBRARIES(${GpuMesh_PROJECT} ${GpuMesh_LIBRARIES})
QT5_USE_MODULES(${GpuMesh_PROJECT} ${GpuMesh_QT_MODULES})
INCLUDE_DIRECTORIES(${GpuMesh_INCLUDE_DIRS})

MESSAGE(STATUS "Copying GpuMesh shared libraries ${GpuMesh_DLLS}" )
FILE(COPY ${GpuMesh_DLLS} DESTINATION "${GpuMesh_BIN_DIR}" NO_SOURCE_PERMISSIONS)
